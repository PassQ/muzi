package com.muzi.bean;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.muzi.bean.SQLUserBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SQLUSER_BEAN".
*/
public class SQLUserBeanDao extends AbstractDao<SQLUserBean, String> {

    public static final String TABLENAME = "SQLUSER_BEAN";

    /**
     * Properties of entity SQLUserBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property OrderNo = new Property(1, String.class, "orderNo", false, "ORDER_NO");
        public final static Property RoomID = new Property(2, String.class, "roomID", false, "ROOM_ID");
        public final static Property ChargeTypeID = new Property(3, String.class, "chargeTypeID", false, "CHARGE_TYPE_ID");
        public final static Property ChargeSum = new Property(4, String.class, "chargeSum", false, "CHARGE_SUM");
        public final static Property UseScore = new Property(5, String.class, "useScore", false, "USE_SCORE");
    };


    public SQLUserBeanDao(DaoConfig config) {
        super(config);
    }
    
    public SQLUserBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SQLUSER_BEAN\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"ORDER_NO\" TEXT," + // 1: orderNo
                "\"ROOM_ID\" TEXT," + // 2: roomID
                "\"CHARGE_TYPE_ID\" TEXT," + // 3: chargeTypeID
                "\"CHARGE_SUM\" TEXT," + // 4: chargeSum
                "\"USE_SCORE\" TEXT);"); // 5: useScore
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_SQLUSER_BEAN_ID ON SQLUSER_BEAN" +
                " (\"ID\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SQLUSER_BEAN\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, SQLUserBean entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String orderNo = entity.getOrderNo();
        if (orderNo != null) {
            stmt.bindString(2, orderNo);
        }
 
        String roomID = entity.getRoomID();
        if (roomID != null) {
            stmt.bindString(3, roomID);
        }
 
        String chargeTypeID = entity.getChargeTypeID();
        if (chargeTypeID != null) {
            stmt.bindString(4, chargeTypeID);
        }
 
        String chargeSum = entity.getChargeSum();
        if (chargeSum != null) {
            stmt.bindString(5, chargeSum);
        }
 
        String useScore = entity.getUseScore();
        if (useScore != null) {
            stmt.bindString(6, useScore);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public SQLUserBean readEntity(Cursor cursor, int offset) {
        SQLUserBean entity = new SQLUserBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // orderNo
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // roomID
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // chargeTypeID
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // chargeSum
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // useScore
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, SQLUserBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setOrderNo(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setRoomID(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setChargeTypeID(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setChargeSum(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUseScore(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(SQLUserBean entity, long rowId) {
        return entity.getId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(SQLUserBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
